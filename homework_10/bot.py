from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, \
    ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, \
    CallbackContext

from config import get_token

start_menu = ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
active_menu = ReplyKeyboardMarkup([['/help'], ['/restart']], resize_keyboard=True)
throw_waiting_menu = ReplyKeyboardMarkup([['/help']], resize_keyboard=True)
dice_menu = InlineKeyboardMarkup([[InlineKeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫', callback_data='dice')]])
is_bot_turn = False
is_started = False
candies = 0
steps = 0


def start(update: Update, context: CallbackContext, is_first=True):
    global candies
    global steps

    if is_first:
        update.effective_chat.send_message(
            f'*{update.effective_user.username},* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n'
            f'*–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ñ–µ—Ç–∫–∏!*\n'
            f'_* —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /help *_ \n'
            '–¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –±—Ä–æ—Å—Ç–∏ –∫—É–±–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞(4-6 –≤–∞—à —Ö–æ–¥ –ø–µ—Ä–≤—ã–π)',
            reply_markup=throw_waiting_menu,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.effective_chat.send_message(
            f'–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ? üòÅ',
            reply_markup=throw_waiting_menu,
            parse_mode=ParseMode.MARKDOWN
        )
    update.effective_chat.send_message(
        '–ù—É —á—Ç–æ, –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∫–æ–Ω—Ñ–µ—Ç–∫–∏!!!',
        reply_markup=dice_menu
    )
    candies = 50
    steps = 15


def dice_roll(update: Update, context: CallbackContext):
    global is_bot_turn
    global is_started
    print(update.callback_query.message)
    update.callback_query.message.edit_reply_markup()
    dice_value = update.effective_chat.send_dice().dice.value

    is_bot_turn = dice_value < 4
    is_started = True
    if is_bot_turn:
        update.effective_chat.send_message(
            '–ñ–∞–ª—å, –Ω–æ –±–æ—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º!)',
            reply_markup=active_menu
        )
        bot_turn(update, context)
    else:
        update.effective_chat.send_message(
            f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í–∞—à —Ö–æ–¥!\n –ù–∞ –∫–æ–Ω—É {candies} –∫–æ–Ω—Ñ–µ—Ç\n–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç(1-{steps})',
            reply_markup=active_menu
        )


def turn(update: Update, context: CallbackContext):
    global candies
    global is_bot_turn
    global is_started
    if is_started:
        try:
            player_turn(update, context)
            check_win(update, context)
            bot_turn(update, context)
            check_win(update, context)
            update.effective_chat.send_message(
                f'–í–∞—à —Ö–æ–¥!\n–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç(1-{steps})'
            )
        except ValueError:
            update.effective_chat.send_message(
                f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç(1-{steps})'
            )
        except Exception as e:
            print(e)
            if is_bot_turn:
                update.effective_chat.send_message(
                    f'–°–æ–∂–∞–ª–µ—é, –Ω–æ –ø–æ–±–µ–¥–∏–ª –±–æ—Ç!(('
                )
            else:
                update.effective_chat.send_message(
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!!! ü•≥ü•≥ü•≥'
                )
            is_started = False
            start(update, context, is_first=False)

    else:
        update.effective_chat.send_message(
            f'–î–ª—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚òùÔ∏è'
        )


def bot_turn(update: Update, context: CallbackContext):
    global candies
    global steps
    global is_bot_turn
    is_bot_turn = True
    candy = candies % (steps + 1)

    candy = 1 if candy == 0 else candy

    if candies <= steps:
        candy = candies
    candies -= candy
    update.effective_chat.send_message(f'–ë–æ—Ç –≤–∑—è–ª {candy} –∫–æ–Ω—Ñ–µ—Ç\n –ù–∞ –∫–æ–Ω—É {candies} –∫–æ–Ω—Ñ–µ—Ç')


def player_turn(update: Update, context: CallbackContext):
    global steps
    global candies
    global is_bot_turn
    is_bot_turn = False
    candy = int(update.message.text)
    if steps < candy < 1:
        raise ValueError
    else:
        candies -= candy
        update.effective_chat.send_message(
            f'–í—ã –≤–∑—è–ª–∏ {candy}\n –ù–∞ –∫–æ–Ω—É {candies} –∫–æ–Ω—Ñ–µ—Ç\n —Ç–µ–ø–µ—Ä—å —Ö–æ–¥–∏—Ç –±–æ—Ç'
        )


def check_win(update, context):
    global candies
    if candies <= 0:
        raise Exception('win')


def help_msg(update, context):
    update.effective_chat.send_message(
        f'–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç,\n'
        f'–∫–∞–∂–¥—ã–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä–µ—Ç –æ—Ç 1 –¥–æ {steps} –∫–æ–Ω—Ñ–µ—Ç,\n '
        f'–ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã —Å–æ —Å—Ç–æ–ª–∞!'
    )


def init():
    updater = Updater(get_token())
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('restart', start))
    dp.add_handler(CommandHandler('help', help_msg))
    dp.add_handler(CallbackQueryHandler(dice_roll))
    dp.add_handler(MessageHandler(Filters.text, turn))
    updater.start_polling()
    updater.idle()
